R Script File (R)
#load the library
library(ggplot2)
library(ggcorrplot)
library(car)

# Load the dataset
data <- read.csv("C:/Users/rajam/Downloads/HousePricePrediction.csv")

# Data Cleaning & Handling Missing Values
data <- na.omit(data)  # Remove missing values
data <- subset(data, select = -Id)  # Drop ID column

# Exploratory Data Analysis (EDA)
numeric_data <- data[sapply(data, is.numeric)]
cor_matrix <- cor(numeric_data)
ggcorrplot(cor_matrix, hc.order = TRUE, lab = TRUE)

# Sale Price Distribution
ggplot(data, aes(x = SalePrice)) +
  geom_histogram(binwidth = 10000, fill = "skyblue", color = "darkblue") +
  labs(title = "Distribution of Sale Price", x = "Price") +
  theme_minimal()

# Scatter Plot: Sale Price vs Lot Area
data <- data[data$LotArea < 40000, ]  # Remove extreme Lot Area values
ggplot(data, aes(x = LotArea, y = SalePrice)) +
  geom_point(color = "red") +
  geom_smooth(method = lm) +
  labs(title = "Scatter Plot: Lot Area vs. Sale Price", x = "Lot Area", y = "Sale Price") +
  theme_minimal()

# Split Data into Training (70%) and Testing (30%)
set.seed(123)
train_indices <- sample(1:nrow(data), size = round(0.7 * nrow(data)))
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]

# Train Multiple Linear Regression Model
model <- lm(SalePrice ~ ., data = train_data)
summary(model)

# Check for Multicollinearity
vif_values <- vif(model)
print(vif_values)

# Model Prediction
predictions <- predict(model, newdata = test_data)

# Model Evaluation
actual_values <- test_data$SalePrice
rmse <- sqrt(mean((predictions - actual_values)^2))
r_squared <- summary(model)$r.squared
adjusted_r_squared <- summary(model)$adj.r.squared

cat("RMSE:", rmse, "\n")
cat("R-Squared:", r_squared, "\n")
cat("Adjusted R-Squared:", adjusted_r_squared, "\n")

# Predict on a Sample Test Case
test_case <- data[1, -which(names(data) == "SalePrice")]  # Select first row (excluding SalePrice)
predicted_price <- predict(model, newdata = test_case)
cat("Predicted Sale Price:", predicted_price, "\n")

# Visualizing Model Predictions
avPlots(model)
